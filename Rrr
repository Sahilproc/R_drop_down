library(shiny)
library(dplyr)
library(DT)

data <- data.frame(
  KOB = c("A", "B", "C", "A", "B", "C"),
  New_Vertical = c("X", "X", "X", "Y", "Y", "Y"),
  Amount = c(10, 20, 30, 40, 50, 60)
)

ui <- fluidPage(
  titlePanel("Group By Table with Filter"),
  sidebarLayout(
    sidebarPanel(
      selectInput("kob", "KOB", c("All", unique(data$KOB))),
      selectInput("vertical", "New_Vertical", c("All", unique(data$New_Vertical))),
      numericInput("amount", "Amount", min = 0, max = 100, value = 0)
    ),
    mainPanel(
      DTOutput("table")
    )
  )
)

server <- function(input, output) {
  
  output$table <- renderDT({
    df <- data
    
    # Apply filters based on user input
    if(input$kob != "All") {
      df <- df %>%
        filter(KOB == input$kob)
    }
    
    if(input$vertical != "All") {
      df <- df %>%
        filter(New_Vertical == input$vertical)
    }
    
    if(input$amount > 0) {
      df <- df %>%
        filter(Amount >= input$amount)
    }
    
    # Apply group by and summarize
    if(input$kob == "All" & input$vertical == "All") {
      df <- df %>%
        group_by(KOB) %>%
        summarize(
          Total_Amount = sum(Amount)
        ) %>%
        ungroup()
    } else {
      df <- df %>%
        group_by(KOB, New_Vertical) %>%
        summarize(
          Total_Amount = sum(Amount)
        ) %>%
        ungroup()
    }
    
    # Show table with footerCallback
    datatable(df, rownames = FALSE, 
              options = list(
                footerCallback = JS("function(tfoot, data, start, end, display) {
                                      var api = this.api();
                                      $(api.column(2).footer()).html(api.column(2).data().reduce(function(a, b) {
                                        return a + b;
                                      }, 0));
                                    }")
              ))
  })
  
}

shinyApp(ui = ui, server = server)
