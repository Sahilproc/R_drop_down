library(shiny)
library(rpivotTable)

# Load data
data(mtcars)

# Define UI
ui <- fluidPage(
  titlePanel("Pivot Table Example"),
  sidebarLayout(
    sidebarPanel(
      selectInput("rows", "Select Rows:", choices = names(mtcars)),
      selectInput("cols", "Select Columns:", choices = names(mtcars)),
      selectInput("vals", "Select Values:", choices = names(mtcars), selected = "mpg"),
      selectInput("agg", "Select Aggregation:", choices = c("Sum", "Average"), selected = "Sum")
    ),
    mainPanel(
      rpivotTableOutput("pivot")
    )
  )
)

# Define server
server <- function(input, output) {
  # Create pivot table
  output$pivot <- renderRpivotTable({
    rpivotTable(
      data = mtcars,
      rows = input$rows,
      cols = input$cols,
      aggregatorName = input$agg,
      vals = input$vals,
      rendererName = "Table",
      afterRender = '
        function(pivotData) {
          var sum = 0;
          for (var i = 0; i < pivotData.length; i++) {
            sum += pivotData[i][colNames.indexOf(input$vals)];
          }
          var colNames = pivotData.map(function(d) { return d.colName; });
          var valIdx = colNames.indexOf(input$vals);
          var pctIdx = pivotData[0].length;
          for (var i = 0; i < pivotData.length; i++) {
            var rowTotal = pivotData[i][valIdx];
            if (rowTotal !== null) {
              pivotData[i][pctIdx] = (rowTotal / sum * 100).toFixed(1) + "%";
            } else {
              pivotData[i][pctIdx] = "";
            }
          }
          colNames[pctIdx] = input$vals + " %";
          return {
            colNames: colNames,
            data: pivotData
          };
        }'
    )
  })
}

# Run the app
shinyApp(ui, server)
