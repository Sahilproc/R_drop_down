import zipfile

def read_jar_file(jar_file_path):
    try:
        with zipfile.ZipFile(jar_file_path, 'r') as jar_file:
            contents = jar_file.namelist()
            return contents
    except zipfile.BadZipFile:
        print(f"Error: '{jar_file_path}' is not a valid JAR file.")
        return []

if __name__ == "__main__":
    jar_file_path = "your-jar-file.jar"  # Replace with the actual path to the JAR file
    jar_contents = read_jar_file(jar_file_path)
    if jar_contents:
        print("Contents of the JAR file:")
        for item in jar_contents:
            print(item)
import win32com.client
import pandas as pd

# Connect to Outlook
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder(6)  # 6 refers to the Inbox folder

# Define the subject of the emails you want to search for
search_subject = "Your Specific Subject"

# Initialize lists to store email bodies
email_bodies = []

# Loop through emails in the inbox
for message in inbox.Items:
    if message.Subject == search_subject:
        email_bodies.append(message.Body)

# Create a DataFrame with the email bodies
df = pd.DataFrame(email_bodies, columns=["Email Body"])

# Save the DataFrame to an Excel file
excel_file_path = "email_bodies.xlsx"
df.to_excel(excel_file_path, index=False)

print("Email bodies saved to:", excel_file_path)






import win32com.client
import pandas as pd

# Connect to Outlook
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder(6)  # 6 refers to the Inbox folder

# Define the specific text to search for in the subject line
specific_text = "specific subject text"

# Initialize lists to store email bodies
email_bodies = []

# Loop through emails in the inbox
for message in inbox.Items:
    if specific_text.lower() in message.Subject.lower():
        email_bodies.append(message.Body)

# Create a DataFrame with the email bodies
df = pd.DataFrame(email_bodies, columns=["Email Body"])

# Save the DataFrame to an Excel file
excel_file_path = "email_bodies.xlsx"
df.to_excel(excel_file_path, index=False)




import win32com.client
import pandas as pd

# Function to fetch emails from a specific folder
def fetch_emails_from_folder(folder_name, outlook):
    folder = outlook.Folders.Item(folder_name)
    messages = folder.Items
    email_bodies = []
    for message in messages:
        if specific_text.lower() in message.Subject.lower():
            email_bodies.append(message.Body)
    return email_bodies

# Connect to Outlook
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")

# Define the specific text to search for in the subject line
specific_text = "specific subject text"

# Define the folder names for the two email accounts
folder_names = ["FolderName1", "FolderName2"]  # Replace with the actual folder names

# Initialize lists to store email bodies
all_email_bodies = []

# Loop through the folders of each email account
for folder_name in folder_names:
    email_bodies = fetch_emails_from_folder(folder_name, outlook)
    all_email_bodies.extend(email_bodies)

# Create a DataFrame with the email bodies
df = pd.DataFrame(all_email_bodies, columns=["Email Body"])

# Save the DataFrame to an Excel file
excel_file_path = "email_bodies.xlsx"
df.to_excel(excel_file_path, index=False)

print("Email bodies saved to:", excel_file_path)

import win32com.client
import pandas as pd
from datetime import datetime

# Connect to Outlook
outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
inbox = outlook.GetDefaultFolder(6)  # 6 refers to the Inbox folder

# Define the specific text to search for in the subject line
specific_text = "specific subject text"

# Define the date to filter emails
desired_date = datetime(2024, 3, 15)  # Change to your desired date

# Initialize lists to store email bodies and dates
email_bodies = []
email_dates = []

# Loop through emails in the inbox
for message in inbox.Items:
    if specific_text.lower() in message.Subject.lower():
        received_date = message.ReceivedTime.date()
        if received_date == desired_date:
            email_bodies.append(message.Body)
            email_dates.append(received_date)

# Create a DataFrame with the email bodies and dates
df = pd.DataFrame({"Email Body": email_bodies, "Received Date": email_dates})

# Save the DataFrame to an Excel file
excel_file_path = "email_bodies.xlsx"
df.to_excel(excel_file_path, index=False)

print("Email bodies saved to:", excel_file_path)


print("Email bodies saved to:", excel_file_path)

